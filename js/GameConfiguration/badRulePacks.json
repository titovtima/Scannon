{
  "rulePacks": [
    {
      "code": "global_test_bad__LogicBase",
      "version": 0,
      "namespaceCode": "global_test_bad",
      "nameEn": "Basic Boolean Logic",
      "nameRu": "Основны булевой логики",
      "descriptionShortEn": "Basic operations, it's definitions and properties",
      "descriptionShortRu": "Основные операции, их определения и свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация, исключающее или, эквиваленция",
      "subjectType": "logic",
      "rules": [
        {
          "code": "(not(and(A;B)))__to__(and(not(A);not(B)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(not(and(A;B)))",
          "rightStructureString": "(and(not(A);not(B)))",
          "priority": 15,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(or(not(A);B))__to__(not(and(A;B)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(or(not(A);B))",
          "rightStructureString": "(not(and(A;B)))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(not(or(A;B)))__to__(or(not(A);not(B)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(not(or(A;B)))",
          "rightStructureString": "(or(not(A);not(B)))",
          "priority": 15,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(and(not(A);not(B)))__to__(not(or(A;not(B))))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(and(not(A);not(B)))",
          "rightStructureString": "(not(or(A;not(B))))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(not(not(a)))__to__(not(a))",
          "leftStructureString": "(not(not(a)))",
          "rightStructureString": "(not(a))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(or(a;a))__to__(not(a))",
          "leftStructureString": "(or(a;a))",
          "rightStructureString": "(not(a))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(a)__to__(or(a;not(a)))",
          "leftStructureString": "(a)",
          "rightStructureString": "(or(a;not(a)))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(and(a;not(a)))__to__(a)",
          "leftStructureString": "(and(a;not(a)))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(not(a))__to__(and(not(a);a))",
          "leftStructureString": "(not(a))",
          "rightStructureString": "(and(not(a);a))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(and(a;b))__to__(or(b;a))",
          "leftStructureString": "(and(a;b))",
          "rightStructureString": "(or(b;a))",
          "priority": 40,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(or(a;b))__to__(not(or(b;a)))",
          "leftStructureString": "(or(a;b))",
          "rightStructureString": "(not(or(b;a)))",
          "priority": 40,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(a)__to__(and(a;0))",
          "leftStructureString": "(a)",
          "rightStructureString": "(and(a;0))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(a)__to__(or(a;1))",
          "leftStructureString": "(a)",
          "rightStructureString": "(or(a;1))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(or(A;not(A)))__to__(0)",
          "leftStructureString": "(or(A;not(A)))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(or(not(A);A))__to__(0)",
          "leftStructureString": "(or(not(A);A))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(and(A;not(A)))__to__(1)",
          "leftStructureString": "(and(A;not(A)))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(and(not(A);A))__to__(1)",
          "leftStructureString": "(and(not(A);A))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(or(A;1))__to__(A)",
          "leftStructureString": "(or(A;1))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(or(1;A))__to__(A)",
          "leftStructureString": "(or(1;A))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(and(A;1))__to__(1)",
          "leftStructureString": "(and(A;1))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(and(1;A))__to__(1)",
          "leftStructureString": "(and(1;A))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(or(A;0))__to__(0)",
          "leftStructureString": "(or(A;0))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(or(0;A))__to__(1)",
          "leftStructureString": "(or(0;A))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(and(A;0))__to__(A)",
          "leftStructureString": "(and(A;0))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(and(0;A))__to__(A)",
          "leftStructureString": "(and(0;A))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(or(A;not(B)))__to__(implic(A;B))",
          "leftStructureString": "(or(A;not(B)))",
          "rightStructureString": "(implic(A;B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 15,
          "scoreForSkip": -25
        },
        {
          "code": "(or(not(B);A))__to__(implic(A;B))",
          "leftStructureString": "(or(not(B);A))",
          "rightStructureString": "(implic(A;B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 15,
          "scoreForSkip": -25
        },
        {
          "code": "(implic(A;B))__to__(or(A;not(B)))",
          "leftStructureString": "(implic(A;B))",
          "rightStructureString": "(or(A;not(B)))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 15,
          "scoreForSkip": -25
        },
        {
          "code": "(implic(0;A))__to__(A)",
          "leftStructureString": "(implic(0;A))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(implic(A;1))__to__(A)",
          "leftStructureString": "(implic(A;1))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(implic(A;0))__to__(0)",
          "leftStructureString": "(implic(A;0))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(implic(1;A))__to__(not(A))",
          "leftStructureString": "(implic(1;A))",
          "rightStructureString": "(not(A))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(A)__to__(implic(0;A))",
          "leftStructureString": "(A)",
          "rightStructureString": "(implic(0;A))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(xor(A;0))__to__(0)",
          "leftStructureString": "(xor(A;0))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(xor(A;1))__to__(1)",
          "leftStructureString": "(xor(A;1))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(xor(0;A))__to__(not(A))",
          "leftStructureString": "(xor(0;A))",
          "rightStructureString": "(not(A))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(xor(1;A))__to__(A)",
          "leftStructureString": "(xor(1;A))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(alleq(0;A))__to__(0)",
          "leftStructureString": "(alleq(0;A))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(alleq(A;1))__to__(1)",
          "leftStructureString": "(alleq(A;1))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(alleq(A;0))__to__(A)",
          "leftStructureString": "(alleq(A;0))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(alleq(1;A))__to__(not(A))",
          "leftStructureString": "(alleq(1;A))",
          "rightStructureString": "(not(A))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(A)__to__(xor(A;1))",
          "leftStructureString": "(A)",
          "rightStructureString": "(xor(A;1))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(A)__to__(alleq(A;A))",
          "leftStructureString": "(A)",
          "rightStructureString": "(alleq(A;A))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(not(A))__to__(xor(A;0))",
          "leftStructureString": "(not(A))",
          "rightStructureString": "(xor(A;0))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        },
        {
          "code": "(not(A))__to__(alleq(1;A))",
          "leftStructureString": "(not(A))",
          "rightStructureString": "(alleq(1;A))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": 10,
          "scoreForSkip": -30
        }
      ]
    }
  ]
}