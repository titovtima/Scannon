{
  "rulePacks": [
    {
      "code": "all__LogicBase",
      "version": 0,
      "namespaceCode": "all",
      "nameEn": "Basic Boolean Logic",
      "nameRu": "Основны булевой логики",
      "descriptionShortEn": "Basic operations, it's definitions and properties",
      "descriptionShortRu": "Основные операции, их определения и свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация, исключающее или, эквиваленция",
      "subjectType": "logic",
      "rules": [
        {
          "code": "(not(not(a)))__to__(a)",
          "leftStructureString": "(not(not(a)))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(a)__to__(not(not(a)))",
          "leftStructureString": "(a)",
          "rightStructureString": "(not(not(a)))",
          "priority": 89,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(or(a;a))__to__(a)",
          "leftStructureString": "(or(a;a))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(a)__to__(or(a;a))",
          "leftStructureString": "(a)",
          "rightStructureString": "(or(a;a))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(a;a))__to__(a)",
          "leftStructureString": "(and(a;a))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(a)__to__(and(a;a))",
          "leftStructureString": "(a)",
          "rightStructureString": "(and(a;a))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(a;b))__to__(and(b;a))",
          "leftStructureString": "(and(a;b))",
          "rightStructureString": "(and(b;a))",
          "priority": 40,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(or(a;b))__to__(or(b;a))",
          "leftStructureString": "(or(a;b))",
          "rightStructureString": "(or(b;a))",
          "priority": 40,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(a)__to__(and(a;1))",
          "leftStructureString": "(a)",
          "rightStructureString": "(and(a;1))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(a)__to__(or(a;0))",
          "leftStructureString": "(a)",
          "rightStructureString": "(or(a;0))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(or(A;not(A)))__to__(1)",
          "leftStructureString": "(or(A;not(A)))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(or(not(A);A))__to__(1)",
          "leftStructureString": "(or(not(A);A))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(A;not(A)))__to__(0)",
          "leftStructureString": "(and(A;not(A)))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(not(A);A))__to__(0)",
          "leftStructureString": "(and(not(A);A))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(or(A;1))__to__(1)",
          "leftStructureString": "(or(A;1))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(or(1;A))__to__(1)",
          "leftStructureString": "(or(1;A))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(A;1))__to__(A)",
          "leftStructureString": "(and(A;1))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(1;A))__to__(A)",
          "leftStructureString": "(and(1;A))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(or(A;0))__to__(A)",
          "leftStructureString": "(or(A;0))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(or(0;A))__to__(A)",
          "leftStructureString": "(or(0;A))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(A;0))__to__(0)",
          "leftStructureString": "(and(A;0))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(0;A))__to__(0)",
          "leftStructureString": "(and(0;A))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(not(0))__to__(1)",
          "leftStructureString": "(not(0))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(not(1))__to__(0)",
          "leftStructureString": "(not(1))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "SimpleComputation",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "ZeroComputation",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "ParentBracketsExpansion",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 30,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "ArgumentsSwap",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 40,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "ArgumentsPermutation",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 40,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "OpeningBrackets",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 30,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "ArgumentsPermutationInOriginalOrder",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 41,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "ReduceArithmetic",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "TwoSidesArithmeticReduce",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        }
      ]
    },
    {
      "code": "all__DeMorganLaw",
      "version": 0,
      "namespaceCode": "all",
      "nameEn": "De Morgan Law",
      "nameRu": "Закон де Моргана",
      "descriptionShortEn": "Definition and basic properties",
      "descriptionShortRu": "Определение и основные свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание",
      "subjectType": "logic",
      "rules": [
        {
          "code": "(not(and(A;B)))__to__(or(not(A);not(B)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(not(and(A;B)))",
          "rightStructureString": "(or(not(A);not(B)))",
          "priority": 15,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(or(not(A);not(B)))__to__(not(and(A;B)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(or(not(A);not(B)))",
          "rightStructureString": "(not(and(A;B)))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(not(or(A;B)))__to__(and(not(A);not(B)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(not(or(A;B)))",
          "rightStructureString": "(and(not(A);not(B)))",
          "priority": 15,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(not(A);not(B)))__to__(not(or(A;B)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(and(not(A);not(B)))",
          "rightStructureString": "(not(or(A;B)))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        }
      ]
    },
    {
      "code": "all__Implication",
      "version": 0,
      "namespaceCode": "all",
      "nameEn": "Implication",
      "nameRu": "",
      "descriptionShortEn": "Definition and basic properties",
      "descriptionShortRu": "Определение и основные свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация",
      "subjectType": "logic",
      "rules": [
        {
          "code": "(or(not(A);B))__to__(implic(A;B))",
          "leftStructureString": "(or(not(A);B))",
          "rightStructureString": "(implic(A;B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(or(B;not(A)))__to__(implic(A;B))",
          "leftStructureString": "(or(B;not(A)))",
          "rightStructureString": "(implic(A;B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(implic(A;B))__to__(or(not(A);B))",
          "leftStructureString": "(implic(A;B))",
          "rightStructureString": "(or(not(A);B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(implic(0;A))__to__(1)",
          "leftStructureString": "(implic(0;A))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(implic(A;1))__to__(1)",
          "leftStructureString": "(implic(A;1))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(implic(A;0))__to__(not(A))",
          "leftStructureString": "(implic(A;0))",
          "rightStructureString": "(not(A))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(implic(1;A))__to__(A)",
          "leftStructureString": "(implic(1;A))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(A)__to__(implic(1;A))",
          "leftStructureString": "(A)",
          "rightStructureString": "(implic(1;A))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        }
      ]
    },
    {
      "code": "all__ExclusiveOr",
      "version": 0,
      "namespaceCode": "all",
      "nameEn": "Exclusive Or",
      "nameRu": "Исключающее или",
      "descriptionShortEn": "Definition and basic properties",
      "descriptionShortRu": "Определение и основные свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Exclusive Or",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, исключающее или",
      "subjectType": "logic",
      "rules": [
        {
          "code": "(xor(A;B))__to__(or(and(not(A);B);and(A;not(B))))",
          "leftStructureString": "(xor(A;B))",
          "rightStructureString": "(or(and(not(A);B);and(A;not(B))))",
          "priority": 30,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(or(and(not(A);B);and(A;not(B))))__to__(xor(A;B))",
          "leftStructureString": "(or(and(not(A);B);and(A;not(B))))",
          "rightStructureString": "(xor(A;B))",
          "priority": 30,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(xor(A;0))__to__(A)",
          "leftStructureString": "(xor(A;0))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(xor(A;1))__to__(not(A))",
          "leftStructureString": "(xor(A;1))",
          "rightStructureString": "(not(A))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(xor(0;A))__to__(A)",
          "leftStructureString": "(xor(0;A))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(xor(1;A))__to__(not(A))",
          "leftStructureString": "(xor(1;A))",
          "rightStructureString": "(not(A))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(A)__to__(xor(A;0))",
          "leftStructureString": "(A)",
          "rightStructureString": "(xor(A;0))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(not(A))__to__(xor(A;1))",
          "leftStructureString": "(not(A))",
          "rightStructureString": "(xor(A;1))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        }
      ]
    },
    {
      "code": "all__Equivalence",
      "version": 0,
      "namespaceCode": "all",
      "nameEn": "Equivalence",
      "nameRu": "Эквиваленция",
      "descriptionShortEn": "Definition and basic properties",
      "descriptionShortRu": "Определение и основные свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Equivalence",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, эквиваленция",
      "subjectType": "logic",
      "rules": [

        {
          "code": "(alleq(A;B))__to__(or(and(A;B);and(not(A);not(B))))",
          "leftStructureString": "(alleq(A;B))",
          "rightStructureString": "(or(and(A;B);and(not(A);not(B))))",
          "priority": 30,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(or(and(A;B);and(not(A);not(B))))__to__(alleq(A;B))",
          "leftStructureString": "(or(and(A;B);and(not(A);not(B))))",
          "rightStructureString": "(alleq(A;B))",
          "priority": 30,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(alleq(0;A))__to__(not(A))",
          "leftStructureString": "(alleq(0;A))",
          "rightStructureString": "(not(A))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(alleq(A;1))__to__(A)",
          "leftStructureString": "(alleq(A;1))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(alleq(A;0))__to__(not(A))",
          "leftStructureString": "(alleq(A;0))",
          "rightStructureString": "(not(A))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(alleq(1;A))__to__(A)",
          "leftStructureString": "(alleq(1;A))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(A)__to__(alleq(1;A))",
          "leftStructureString": "(A)",
          "rightStructureString": "(alleq(1;A))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(not(A))__to__(alleq(0;A))",
          "leftStructureString": "(not(A))",
          "rightStructureString": "(alleq(0;A))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        }
      ]
    },
    {
      "code": "all__RelativeComplement",
      "version": 0,
      "namespaceCode": "all",
      "nameEn": "Relative Complement",
      "nameRu": "Логическое дополнение",
      "descriptionShortEn": "Definition and basic properties",
      "descriptionShortRu": "Определение и основные свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Relative Complement",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация, исключающее или, эквиваленция, дополнение",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "all",
          "rulePackCode": "all__LogicBase"
        }
      ],
      "rules": [
        {
          "code": "(and(A;not(B)))__to__(set-(A;B))",
          "leftStructureString": "(and(A;not(B)))",
          "rightStructureString": "(set-(A;B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(not(B);A))__to__(set-(A;B))",
          "leftStructureString": "(and(not(B);A))",
          "rightStructureString": "(set-(A;B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(set-(A;B))__to__(and(A;not(B)))",
          "leftStructureString": "(set-(A;B))",
          "rightStructureString": "(and(A;not(B)))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(set-(A;B))__to__(not(implic(A;B)))",
          "leftStructureString": "(set-(A;B))",
          "rightStructureString": "(not(implic(A;B)))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(not(implic(A;B)))__to__(set-(A;B))",
          "leftStructureString": "(not(implic(A;B)))",
          "rightStructureString": "(set-(A;B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(implic(A;B))__to__(not(set-(A;B)))",
          "leftStructureString": "(implic(A;B))",
          "rightStructureString": "(not(set-(A;B)))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(not(set-(A;B)))__to__(implic(A;B))",
          "leftStructureString": "(not(set-(A;B)))",
          "rightStructureString": "(implic(A;B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(set-(A;0))__to__(A)",
          "leftStructureString": "(set-(A;0))",
          "rightStructureString": "(A)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(set-(A;1))__to__(0)",
          "leftStructureString": "(set-(A;1))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(set-(0;A))__to__(0)",
          "leftStructureString": "(set-(0;A))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(set-(1;A))__to__(not(A))",
          "leftStructureString": "(set-(1;A))",
          "rightStructureString": "(not(A))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(A)__to__(set-(A;0))",
          "leftStructureString": "(A)",
          "rightStructureString": "(set-(A;0))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        }
      ]
    },
    {
      "code": "all__LogicNotAnd",
      "version": 0,
      "namespaceCode": "all",
      "nameEn": "Negation of Conjunction",
      "nameRu": "Отрицание конъюнкции (Штрих Шеффера)",
      "descriptionShortEn": "Definition and basic properties",
      "descriptionShortRu": "Определение и основные свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Negation of Conjunction",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация, исключающее или, эквиваленция, отрицание конъюнкции",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "all",
          "rulePackCode": "all__LogicBase"
        }
      ],
      "rules": [
        {
          "code": "(nand(A;B))__to__(not(and(A;B)))",
          "leftStructureString": "(nand(A;B))",
          "rightStructureString": "(not(and(A;B)))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(not(and(A;B)))__to__(nand(A;B))",
          "leftStructureString": "(not(and(A;B)))",
          "rightStructureString": "(nand(A;B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        }
      ]
    },
    {
      "code": "all__LogicNotOr",
      "version": 0,
      "namespaceCode": "all",
      "nameEn": "Negation of Disjunction",
      "nameRu": "Отрицание дизъюнкции (Стрелка Пирса)",
      "descriptionShortEn": "Definition and basic properties",
      "descriptionShortRu": "Определение и основные свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence, Negation of Disjunction",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация, исключающее или, эквиваленция, отрицание дизъюнкции",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "all",
          "rulePackCode": "all__LogicBase"
        }
      ],
      "rules": [
        {
          "code": "(nor(A;B))__to__(not(or(A;B)))",
          "leftStructureString": "(nor(A;B))",
          "rightStructureString": "(not(or(A;B)))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(not(or(A;B)))__to__(nor(A;B))",
          "leftStructureString": "(not(or(A;B)))",
          "rightStructureString": "(nor(A;B))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        }
      ]
    },
    {
      "code": "all__LogicAbsorptionLaw",
      "version": 0,
      "namespaceCode": "all",
      "nameEn": "Absorption Law",
      "nameRu": "Закон поглощения",
      "descriptionShortEn": "Law and basic properties in Boolean Algebra",
      "descriptionShortRu": "Закон и основные свойства в булевой алгебре",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "all",
          "rulePackCode": "all__LogicBase"
        }
      ],
      "rules": [
        {
          "code": "(and(A;or(A;B)))__to__(A)",
          "leftStructureString": "(and(A;or(A;B)))",
          "rightStructureString": "(A)",
          "priority": 6,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(or(A;and(A;B)))__to__(A)",
          "leftStructureString": "(or(A;and(A;B)))",
          "rightStructureString": "(A)",
          "priority": 6,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(A;or(B;A)))__to__(A)",
          "leftStructureString": "(and(A;or(B;A)))",
          "rightStructureString": "(A)",
          "priority": 6,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(or(A;and(B;A)))__to__(A)",
          "leftStructureString": "(or(A;and(B;A)))",
          "rightStructureString": "(A)",
          "priority": 6,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(or(A;B);A))__to__(A)",
          "leftStructureString": "(and(or(A;B);A))",
          "rightStructureString": "(A)",
          "priority": 6,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(or(and(A;B);A))__to__(A)",
          "leftStructureString": "(or(and(A;B);A))",
          "rightStructureString": "(A)",
          "priority": 6,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(or(B;A);A))__to__(A)",
          "leftStructureString": "(and(or(B;A);A))",
          "rightStructureString": "(A)",
          "priority": 6,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(or(and(B;A);A))__to__(A)",
          "leftStructureString": "(or(and(B;A);A))",
          "rightStructureString": "(A)",
          "priority": 6,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(A)__to__(and(A;or(A;B)))",
          "leftStructureString": "(A)",
          "rightStructureString": "(and(A;or(A;B)))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(A)__to__(or(A;and(A;B)))",
          "leftStructureString": "(A)",
          "rightStructureString": "(or(A;and(A;B)))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "SetComplicatingExtension",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 92,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        }
      ]
    },
    {
      "code": "all__LogicResolution",
      "version": 0,
      "namespaceCode": "all",
      "nameEn": "Resolution",
      "nameRu": "Метод резолюций",
      "descriptionShortEn": "Rules for proof by Resolution method",
      "descriptionShortRu": "правила для доказательств методом резолюций",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "all",
          "rulePackCode": "all__LogicBase"
        }
      ],
      "rules": [
        {
          "code": "(and(not(A);A))__to__(0)",
          "leftStructureString": "(and(not(A);A))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(A;not(A)))__to__(0)",
          "leftStructureString": "(and(A;not(A)))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -30,
          "scoreForSkip": 10
        },
        {
          "code": "(and(or(A;X);not(A)))__to__(and(X;or(A;X);not(A)))",
          "leftStructureString": "(and(or(A;X);not(A)))",
          "rightStructureString": "(and(X;or(A;X);not(A)))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);or(A;X)))__to__(and(X;not(A);or(A;X)))",
          "leftStructureString": "(and(not(A);or(A;X)))",
          "rightStructureString": "(and(X;not(A);or(A;X)))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);A))__to__(and(X;or(not(A);X);A))",
          "leftStructureString": "(and(or(not(A);X);A))",
          "rightStructureString": "(and(X;or(not(A);X);A))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(A;or(not(A);X)))__to__(and(X;A;or(not(A);X)))",
          "leftStructureString": "(and(A;or(not(A);X)))",
          "rightStructureString": "(and(X;A;or(not(A);X)))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(A;X);or(not(A);Y)))__to__(and(or(X;Y);or(A;X);or(not(A);Y)))",
          "leftStructureString": "(and(or(A;X);or(not(A);Y)))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y)))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);or(A;Y)))__to__(and(or(X;Y);or(not(A);X);or(A;Y)))",
          "leftStructureString": "(and(or(not(A);X);or(A;Y)))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y)))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);A;C))__to__(0)",
          "leftStructureString": "(and(not(A);A;C))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(A;not(A);C))__to__(0)",
          "leftStructureString": "(and(A;not(A);C))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(or(A;X);not(A);C))__to__(and(X;or(A;X);not(A);C))",
          "leftStructureString": "(and(or(A;X);not(A);C))",
          "rightStructureString": "(and(X;or(A;X);not(A);C))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);or(A;X);C))__to__(and(X;not(A);or(A;X);C))",
          "leftStructureString": "(and(not(A);or(A;X);C))",
          "rightStructureString": "(and(X;not(A);or(A;X);C))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);A;C))__to__(and(X;or(not(A);X);A;C))",
          "leftStructureString": "(and(or(not(A);X);A;C))",
          "rightStructureString": "(and(X;or(not(A);X);A;C))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(A;or(not(A);X);C))__to__(and(X;A;or(not(A);X);C))",
          "leftStructureString": "(and(A;or(not(A);X);C))",
          "rightStructureString": "(and(X;A;or(not(A);X);C))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(A;X);or(not(A);Y);C))__to__(and(or(X;Y);or(A;X);or(not(A);Y);C))",
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);or(A;Y);C))__to__(and(or(X;Y);or(not(A);X);or(A;Y);C))",
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);A;C;D))__to__(0)",
          "leftStructureString": "(and(not(A);A;C;D))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(A;not(A);C;D))__to__(0)",
          "leftStructureString": "(and(A;not(A);C;D))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(or(A;X);not(A);C;D))__to__(and(X;or(A;X);not(A);C;D))",
          "leftStructureString": "(and(or(A;X);not(A);C;D))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);or(A;X);C;D))__to__(and(X;not(A);or(A;X);C;D))",
          "leftStructureString": "(and(not(A);or(A;X);C;D))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);A;C;D))__to__(and(X;or(not(A);X);A;C;D))",
          "leftStructureString": "(and(or(not(A);X);A;C;D))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(A;or(not(A);X);C;D))__to__(and(X;A;or(not(A);X);C;D))",
          "leftStructureString": "(and(A;or(not(A);X);C;D))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(A;X);or(not(A);Y);C;D))__to__(and(or(X;Y);or(A;X);or(not(A);Y);C;D))",
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);or(A;Y);C;D))__to__(and(or(X;Y);or(not(A);X);or(A;Y);C;D))",
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);A;C;D;E))__to__(0)",
          "leftStructureString": "(and(not(A);A;C;D;E))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(A;not(A);C;D;E))__to__(0)",
          "leftStructureString": "(and(A;not(A);C;D;E))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(or(A;X);not(A);C;D;E))__to__(and(X;or(A;X);not(A);C;D;E))",
          "leftStructureString": "(and(or(A;X);not(A);C;D;E))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D;E))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);or(A;X);C;D;E))__to__(and(X;not(A);or(A;X);C;D;E))",
          "leftStructureString": "(and(not(A);or(A;X);C;D;E))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D;E))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);A;C;D;E))__to__(and(X;or(not(A);X);A;C;D;E))",
          "leftStructureString": "(and(or(not(A);X);A;C;D;E))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D;E))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(A;or(not(A);X);C;D;E))__to__(and(X;A;or(not(A);X);C;D;E))",
          "leftStructureString": "(and(A;or(not(A);X);C;D;E))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D;E))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(A;X);or(not(A);Y);C;D;E))__to__(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E))",
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D;E))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);or(A;Y);C;D;E))__to__(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E))",
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D;E))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);A;C;D;E;F))__to__(0)",
          "leftStructureString": "(and(not(A);A;C;D;E;F))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(A;not(A);C;D;E;F))__to__(0)",
          "leftStructureString": "(and(A;not(A);C;D;E;F))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(or(A;X);not(A);C;D;E;F))__to__(and(X;or(A;X);not(A);C;D;E;F))",
          "leftStructureString": "(and(or(A;X);not(A);C;D;E;F))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D;E;F))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);or(A;X);C;D;E;F))__to__(and(X;not(A);or(A;X);C;D;E;F))",
          "leftStructureString": "(and(not(A);or(A;X);C;D;E;F))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D;E;F))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);A;C;D;E;F))__to__(and(X;or(not(A);X);A;C;D;E;F))",
          "leftStructureString": "(and(or(not(A);X);A;C;D;E;F))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D;E;F))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(A;or(not(A);X);C;D;E;F))__to__(and(X;A;or(not(A);X);C;D;E;F))",
          "leftStructureString": "(and(A;or(not(A);X);C;D;E;F))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D;E;F))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(A;X);or(not(A);Y);C;D;E;F))__to__(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F))",
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D;E;F))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);or(A;Y);C;D;E;F))__to__(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F))",
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D;E;F))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);A;C;D;E;F;G))__to__(0)",
          "leftStructureString": "(and(not(A);A;C;D;E;F;G))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(A;not(A);C;D;E;F;G))__to__(0)",
          "leftStructureString": "(and(A;not(A);C;D;E;F;G))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(or(A;X);not(A);C;D;E;F;G))__to__(and(X;or(A;X);not(A);C;D;E;F;G))",
          "leftStructureString": "(and(or(A;X);not(A);C;D;E;F;G))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D;E;F;G))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);or(A;X);C;D;E;F;G))__to__(and(X;not(A);or(A;X);C;D;E;F;G))",
          "leftStructureString": "(and(not(A);or(A;X);C;D;E;F;G))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D;E;F;G))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);A;C;D;E;F;G))__to__(and(X;or(not(A);X);A;C;D;E;F;G))",
          "leftStructureString": "(and(or(not(A);X);A;C;D;E;F;G))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D;E;F;G))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(A;or(not(A);X);C;D;E;F;G))__to__(and(X;A;or(not(A);X);C;D;E;F;G))",
          "leftStructureString": "(and(A;or(not(A);X);C;D;E;F;G))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D;E;F;G))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(A;X);or(not(A);Y);C;D;E;F;G))__to__(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G))",
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D;E;F;G))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);or(A;Y);C;D;E;F;G))__to__(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G))",
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D;E;F;G))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);A;C;D;E;F;G;H))__to__(0)",
          "leftStructureString": "(and(not(A);A;C;D;E;F;G;H))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(A;not(A);C;D;E;F;G;H))__to__(0)",
          "leftStructureString": "(and(A;not(A);C;D;E;F;G;H))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(or(A;X);not(A);C;D;E;F;G;H))__to__(and(X;or(A;X);not(A);C;D;E;F;G;H))",
          "leftStructureString": "(and(or(A;X);not(A);C;D;E;F;G;H))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D;E;F;G;H))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);or(A;X);C;D;E;F;G;H))__to__(and(X;not(A);or(A;X);C;D;E;F;G;H))",
          "leftStructureString": "(and(not(A);or(A;X);C;D;E;F;G;H))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D;E;F;G;H))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);A;C;D;E;F;G;H))__to__(and(X;or(not(A);X);A;C;D;E;F;G;H))",
          "leftStructureString": "(and(or(not(A);X);A;C;D;E;F;G;H))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D;E;F;G;H))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(A;or(not(A);X);C;D;E;F;G;H))__to__(and(X;A;or(not(A);X);C;D;E;F;G;H))",
          "leftStructureString": "(and(A;or(not(A);X);C;D;E;F;G;H))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D;E;F;G;H))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(A;X);or(not(A);Y);C;D;E;F;G;H))__to__(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H))",
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D;E;F;G;H))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);or(A;Y);C;D;E;F;G;H))__to__(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H))",
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D;E;F;G;H))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);A;C;D;E;F;G;H;I))__to__(0)",
          "leftStructureString": "(and(not(A);A;C;D;E;F;G;H;I))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(A;not(A);C;D;E;F;G;H;I))__to__(0)",
          "leftStructureString": "(and(A;not(A);C;D;E;F;G;H;I))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -25,
          "scoreForSkip": 15
        },
        {
          "code": "(and(or(A;X);not(A);C;D;E;F;G;H;I))__to__(and(X;or(A;X);not(A);C;D;E;F;G;H;I))",
          "leftStructureString": "(and(or(A;X);not(A);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(X;or(A;X);not(A);C;D;E;F;G;H;I))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(not(A);or(A;X);C;D;E;F;G;H;I))__to__(and(X;not(A);or(A;X);C;D;E;F;G;H;I))",
          "leftStructureString": "(and(not(A);or(A;X);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(X;not(A);or(A;X);C;D;E;F;G;H;I))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);A;C;D;E;F;G;H;I))__to__(and(X;or(not(A);X);A;C;D;E;F;G;H;I))",
          "leftStructureString": "(and(or(not(A);X);A;C;D;E;F;G;H;I))",
          "rightStructureString": "(and(X;or(not(A);X);A;C;D;E;F;G;H;I))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(A;or(not(A);X);C;D;E;F;G;H;I))__to__(and(X;A;or(not(A);X);C;D;E;F;G;H;I))",
          "leftStructureString": "(and(A;or(not(A);X);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(X;A;or(not(A);X);C;D;E;F;G;H;I))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(A;X);or(not(A);Y);C;D;E;F;G;H;I))__to__(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H;I))",
          "leftStructureString": "(and(or(A;X);or(not(A);Y);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(or(X;Y);or(A;X);or(not(A);Y);C;D;E;F;G;H;I))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        },
        {
          "code": "(and(or(not(A);X);or(A;Y);C;D;E;F;G;H;I))__to__(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H;I))",
          "leftStructureString": "(and(or(not(A);X);or(A;Y);C;D;E;F;G;H;I))",
          "rightStructureString": "(and(or(X;Y);or(not(A);X);or(A;Y);C;D;E;F;G;H;I))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "scoreForHit": -20,
          "scoreForSkip": 20
        }
      ]
    }
  ]
}